openapi: 3.0.3
info:
  title: Bank Cards Management System API
  description: |
    REST API for managing bank cards, users, and transactions.
    
    ## Authentication
    - Use JWT token for authentication
    - Include token in Authorization header: `Bearer {token}`
    
    ## Roles
    - **ADMIN**: Full access to all operations
    - **USER**: Access only to own cards and operations
  version: 1.0.0
  contact:
    name: API Support
    email: support@bankcards.com

servers:
  - url: http://localhost:8080/api/v1
    description: Development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # User Schemas
    UserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: "john_doe"
        role:
          $ref: '#/components/schemas/Role'
      required:
        - id
        - username
        - role

    LoginUserDTO:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          example: "john_doe"
        password:
          type: string
          format: password
          minLength: 6
          example: "securePassword123"
        role:
          $ref: '#/components/schemas/Role'
      required:
        - username
        - password
        - role

    Role:
      type: string
      enum: [USER, ADMIN]
      example: "USER"

    # Card Schemas
    CardResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        maskedCardNumber:
          type: string
          example: "**** **** **** 1234"
        ownerName:
          type: string
          example: "John Doe"
        expiryDate:
          type: string
          format: date
          example: "2025-12-31"
        status:
          $ref: '#/components/schemas/Status'
        balance:
          type: number
          format: double
          example: 1500.75
      required:
        - id
        - maskedCardNumber
        - ownerName
        - expiryDate
        - status
        - balance

    CreateCardDTO:
      type: object
      properties:
        cardNumberPlain:
          type: string
          description: "Plain card number (will be encrypted)"
          example: "4111111111111234"
        ownerName:
          type: string
          example: "John Doe"
        expiryDate:
          type: string
          format: date
          example: "2025-12-31"
      required:
        - cardNumberPlain
        - ownerName
        - expiryDate

    CardTransferRequestDTO:
      type: object
      properties:
        fromCardId:
          type: integer
          format: int64
          example: 1
        toCardId:
          type: integer
          format: int64
          example: 2
        amount:
          type: number
          format: double
          minimum: 0.01
          example: 100.50
      required:
        - fromCardId
        - toCardId
        - amount

    Status:
      type: string
      enum: [ACTIVE, BLOCKED, EXPIRED]
      example: "ACTIVE"

    # Common Schemas
    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          example: "2023-12-01T10:30:00Z"
        status:
          type: integer
          example: 400
        error:
          type: string
          example: "Bad Request"
        message:
          type: string
          example: "Validation failed"
        path:
          type: string
          example: "/api/v1/users"

  responses:
    BadRequest:
      description: Bad Request - Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: Unauthorized - Invalid or missing token
    Forbidden:
      description: Forbidden - Insufficient permissions

paths:
  # ========== AUTHENTICATION ENDPOINTS ==========
  /auth/login:
    post:
      tags: [Authentication]
      summary: User login
      description: Authenticate user and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "admin"
                password:
                  type: string
                  example: "password123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  type:
                    type: string
                    example: "Bearer"
                  username:
                    type: string
                  role:
                    $ref: '#/components/schemas/Role'
        '401':
          description: Invalid credentials

  # ========== USER MANAGEMENT ENDPOINTS ==========
  /users:
    post:
      tags: [User Management]
      summary: Create new user
      description: ADMIN only - Create a new user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserDTO'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Username already taken

    get:
      tags: [User Management]
      summary: Get all users
      description: ADMIN only - Get paginated list of all users
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
          description: Page number (0-based)
        - name: size
          in: query
          schema:
            type: integer
            default: 10
          description: Page size
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserDTO'
                  totalPages:
                    type: integer
                  totalElements:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer

  /users/me:
    get:
      tags: [User Management]
      summary: Get current user
      description: Get authenticated user's information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User information retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '404':
          $ref: '#/components/responses/NotFound'

  /users/{userId}:
    get:
      tags: [User Management]
      summary: Get user by ID
      description: ADMIN only - Get user by ID
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [User Management]
      summary: Delete user
      description: ADMIN only - Delete user by ID (cannot delete yourself)
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted successfully
        '400':
          description: Cannot delete yourself
        '404':
          $ref: '#/components/responses/NotFound'

  /users/{userId}/role:
    patch:
      tags: [User Management]
      summary: Update user role
      description: ADMIN only - Update user role (cannot change your own role)
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      responses:
        '200':
          description: Role updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          description: Cannot change your own role
        '404':
          $ref: '#/components/responses/NotFound'

  /users/me/username:
    patch:
      tags: [User Management]
      summary: Update username
      description: Update current user's username
      security:
        - bearerAuth: []
      parameters:
        - name: newUsername
          in: query
          required: true
          schema:
            type: string
            minLength: 3
            maxLength: 50
      responses:
        '200':
          description: Username updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          description: Username already taken or same as current

  # ========== CARD MANAGEMENT ENDPOINTS ==========
  /cards/user/{userId}:
    post:
      tags: [Card Management]
      summary: Create new card
      description: ADMIN only - Create a new bank card for user
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCardDTO'
      responses:
        '201':
          description: Card created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponseDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: User not found

  /cards/admin:
    get:
      tags: [Card Management]
      summary: Get all cards
      description: ADMIN only - Get all cards with pagination and filters
      security:
        - bearerAuth: []
      parameters:
        - name: ownerName
          in: query
          schema:
            type: string
          description: Filter by owner name (partial match)
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/Status'
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Cards retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/CardResponseDTO'
                  totalPages:
                    type: integer
                  totalElements:
                    type: integer

  /cards/my:
    get:
      tags: [Card Management]
      summary: Get my cards
      description: Get user's own cards with pagination and filters
      security:
        - bearerAuth: []
      parameters:
        - name: ownerName
          in: query
          schema:
            type: string
          description: Filter by owner name (partial match)
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/Status'
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: User cards retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/CardResponseDTO'

  /cards/{cardId}/balance:
    get:
      tags: [Card Management]
      summary: Get card balance
      description: Get balance of user's own card
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Balance retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  balance:
                    type: number
                    format: double
        '403':
          description: Access denied - not your card
        '404':
          $ref: '#/components/responses/NotFound'

  /cards/{cardId}/block:
    patch:
      tags: [Card Management]
      summary: Block card
      description: ADMIN only - Block a card
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Card blocked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponseDTO'
        '404':
          $ref: '#/components/responses/NotFound'

  /cards/{cardId}/activate:
    patch:
      tags: [Card Management]
      summary: Activate card
      description: ADMIN only - Activate a blocked card
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Card activated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponseDTO'
        '400':
          description: Cannot activate expired card
        '404':
          $ref: '#/components/responses/NotFound'

  /cards/my/{cardId}/block:
    patch:
      tags: [Card Management]
      summary: Block own card
      description: USER - Block their own card
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Card blocked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponseDTO'
        '403':
          description: You can only block your own cards
        '404':
          $ref: '#/components/responses/NotFound'

  /cards/transfer:
    post:
      tags: [Card Management]
      summary: Transfer between cards
      description: Transfer money between user's own cards
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardTransferRequestDTO'
      responses:
        '200':
          description: Transfer completed successfully
        '400':
          description: |
            Possible errors:
            - Source and target cards must be different
            - Not enough balance
            - Card is not active
        '403':
          description: Transfer allowed only between your own cards
        '404':
          description: One or both cards not found

  /cards/{cardId}:
    delete:
      tags: [Card Management]
      summary: Delete card
      description: ADMIN only - Delete a card
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Card deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'

tags:
  - name: Authentication
    description: User authentication endpoints
  - name: User Management
    description: User management endpoints (ADMIN only)
  - name: Card Management
    description: Bank card management endpoints